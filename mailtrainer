#!/usr/bin/env python
##
## Name:     mailtrainer
## Purpose:  Command-line tool to train a classifier for e-mail messages.
##
## Copyright (C) 2008 Michael J. Fromberger, All Rights Reserved.
##

import email, getopt, os, re, sys, textwrap
from Classifier import (aggregator, read_mailbox, split_mail, hmm_classifier,
                        make_seekable)

# Default location of mail classification data
database_path = '~/.maildata.db'


def usage(long=False):
    print >> sys.stderr, "Usage: mailtrainer [options] groups [input-file]"
    if not long:
        print >> sys.stderr, "  [use -h/--help for command options]"
    else:
        print >> sys.stderr, textwrap.dedent('''
        Specify one or more group names separated by commas.
        
        Options include:
        -d/--database <path>   - specify location of database.
        -f/--format <format>   - specify input format.
        -h/--help              - display this help message.
        -n/--nocount           - do not modify document count.
        -t/--train             - upregulate message contents.
        -u/--untrain           - downregulate message contents.

        Database path:  %s

        The input format may be "single" (the default) or "mbox".  
        With "single", the input file is considered to contain one
        single e-mail message.  With "mbox", each input file is
        treated as a Unix mailbox (mbox) file and all the messages
        found therein are processed separately.
        ''' % os.path.expanduser(database_path))


def main(argv):
    """Command-line driver."""
    global database_path

    try:
        opts, args = getopt.gnu_getopt(
            argv, 'd:f:hntu',
            ('database=', 'format=', 'help', 'nocount', 'train', 'untrain'))
    except getopt.GetoptError, e:
        usage(False)
        return 1

    action = 'train'  # what to do:  train/untrain
    adjust = True  # adjust document counts?

    # The 'format' option controls how the trainer reads input
    # 'single' -- read a single message from the input file
    # 'mbox'   -- read all messages from Unix-style mailbox input
    format = 'single'

    for opt, arg in opts:
        if opt in ('-d', '--database'):
            database_path = arg
        elif opt in ('-f', '--format'):
            format = arg
        elif opt in ('-h', '--help'):
            usage(True)
            return 0
        elif opt in ('-t', '--train'):
            action = 'train'
        elif opt in ('-u', '--untrain'):
            action = 'untrain'
        elif opt in ('-n', '--nocount'):
            adjust = False

    if len(args) == 0:
        print >> sys.stderr, \
              "Error:  no group tags were specified"
        usage(False)
        return 1
    if format not in ('single', 'mbox'):
        print >> sys.stderr, \
              "Error:  format %r not understood" % format
        usage(False)
        return 1

    tags = re.split(r'\s*,\s*', args[0].strip())
    if len(args) < 2 or args[-1] == '-':
        ifp = make_seekable(sys.stdin)
    else:
        try:
            ifp = file(args[-1], 'rU')
        except (IOError, OSError), e:
            print >> sys.stderr, "Error opening '%s':\n -- %s" % (args[-1], e)
            return 1

    cls = hmm_classifier(os.path.expanduser(database_path))
    for tag in tags:
        cls.add_group(tag)

    if format == 'mbox':
        for pos, msg in enumerate(read_mailbox(ifp)):
            if action == 'train':
                cls.train(msg, tags, adjust)
            else:
                cls.untrain(msg, tags, adjust)

            sys.stderr.write('.')  # progress indicator
    else:
        msg = aggregator(split_mail(email.message_from_file(ifp), True))
        if action == 'train':
            cls.train(msg, tags, adjust)
        else:
            cls.untrain(msg, tags, adjust)

    print >> sys.stderr, "<done>"
    cls.close()

    return 0


if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))

# Here there be dragons
