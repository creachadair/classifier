#!/usr/bin/env python
##
## Name:     texttagger
## Purpose:  Filter to classify and tag arbitrary text input.
##
## Copyright (C) 2008 Michael J. Fromberger, All Rights Reserved.
##

import getopt, os, sys, textwrap
from Classifier import hmm_classifier, remove_stopwords, make_seekable
from Classifier.textparsers import *

# Location of the classification database
db_path = os.getenv('TEXTDB_PATH', 'text.db')


def usage(long=False):
    print >> sys.stderr, "Usage: texttagger [options] [input-file]"
    if not long:
        print >> sys.stderr, "  [use -h/--help for command options]"
    else:
        print >> sys.stderr, textwrap.dedent('''
        Options include:
        -d/--database <path>   - specify location of database.
        -h/--help              - display this help message.
        -o/--output <path>     - specify output file.

        Database path:  %s
        ''' % os.path.expanduser(db_path))


split_input = compose(word_split, limit_length(128), lowercase,
                      remove_stopwords)


def main(argv):
    """Command-line driver."""
    global db_path

    ifp = sys.stdin
    ofp = sys.stdout
    try:
        opts, args = getopt.gnu_getopt(argv, 'd:ho:',
                                       ('database=', 'help', 'output='))
    except getopt.GetoptError, e:
        usage(False)
        return 1

    for opt, arg in opts:
        if opt in ('-d', '--database'):
            db_path = arg
        elif opt in ('-h', '--help'):
            usage(True)
            return 0
        elif opt in ('-o', '--output'):
            try:
                ofp = file(arg, 'wt')
            except (IOError, OSError), e:
                print >> sys.stderr, "Error opening '%s':\n -- %s" % (arg, e)
                return 1

    if len(args) > 0:
        try:
            ifp = file(args[0], 'rU')
        except (IOError, OSError), e:
            print >> sys.stderr, "Error opening '%s': %s" % (args[0], e)
            return 1
    else:
        ifp = make_seekable(sys.stdin)

    cls = hmm_classifier(os.path.expanduser(db_path))
    msg = aggregator(split_input(ifp.read()))
    try:
        cls.classify(msg)

        for grp, prob in cls.result():
            print "%10s: %0.3e" % (grp, prob)
    except TypeError:
        print >> sys.stderr, "I could not classify this document, sorry."

    return 0


if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))

# Here there be dragons
