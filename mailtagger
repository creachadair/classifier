#!/usr/bin/env python
##
## Name:     mailtagger
## Purpose:  Filter to classify and tag e-mail messages.
##
## Copyright (C) 2008 Michael J. Fromberger, All Rights Reserved.
##

import getopt, os, sys, textwrap
from Classifier import (aggregator, split_mail, hmm_classifier, make_seekable)
from email import message_from_file

# Default location of mail classification data
database_path = '~/.maildata.db'


def usage(long=False):
    print >> sys.stderr, "Usage: mailtagger [options] [input-file]"
    if not long:
        print >> sys.stderr, "  [use -h/--help for command options]"
    else:
        print >> sys.stderr, textwrap.dedent('''
        Options include:
        -d/--database <path>   - specify location of database.
        -h/--help              - display this help message.
        -o/--output <path>     - specify output file.

        Database path:  %s
        ''' % os.path.expanduser(database_path))


def main(argv):
    """Command-line driver."""
    global database_path

    ofp = sys.stdout
    try:
        opts, args = getopt.gnu_getopt(argv, 'd:ho:',
                                       ('database=', 'help', 'output='))
    except getopt.GetoptError, e:
        usage(False)
        return 1

    for opt, arg in opts:
        if opt in ('-d', '--database'):
            database_path = arg
        elif opt in ('-h', '--help'):
            usage(True)
            return 0
        elif opt in ('-o', '--output'):
            try:
                ofp = file(arg, 'wt')
            except (IOError, OSError), e:
                print >> sys.stderr, "Error opening '%s':\n -- %s" % (arg, e)
                return 1

    if len(args) > 0:
        try:
            ifp = file(args[0], 'rU')
        except (IOError, OSError), e:
            print >> sys.stderr, "Error opening '%s': %s" % (args[0], e)
            return 1
    else:
        ifp = make_seekable(sys.stdin)

    cls = hmm_classifier(os.path.expanduser(database_path))
    msg = message_from_file(ifp)
    txt = aggregator(split_mail(msg))
    try:
        cls.classify(txt)
        tag = cls.result_group()
    except TypeError:
        tag = 'unknown'

    try:
        msg.replace_header('X-MailTag', tag)
    except KeyError:
        msg.add_header('X-MailTag', tag)

    ofp.write(str(msg))
    return 0


if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))

# Here there be dragons
